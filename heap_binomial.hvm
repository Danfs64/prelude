// Binomial Heap
//
// A Binomial Heap is represented as list of tree nodes
//
// A tree node of a Binomial Heap is composed of:
//   - Its rank, which determines its size and how many children it has;
//   - Its root value, which is lower than the values from its children (The min-heap property);
//   - Its children, represented as a list of tree nodes.
//
// Type definitions:
// type List<A: Type> {
//     List.nil
//     List.cons(head: A, tail: List<A>)
// }
//
// type Node<Key: Type> {
//     (rank: Nat, root: Key, children: List<Node<Key>>)
// }
//
// type Heap<Key> = List<Node<Key>>
//
// type Maybe<A: Type> {
//     Maybe.none
//     Maybe.some(value: A)
// }
//
// type Pair<A: Type, B: Type> {
//    (fst: A, snd: B)
// }


//* Helper Functions

(Nat.min x y) = (Nat.min.aux (<= x y) x y)
    (Nat.min.aux 1 x y) = x
    (Nat.min.aux 0 x y) = y

(List.reverse ls) = (List.reverse.aux ls Nil)
    (List.reverse.aux  Nil        acc) = acc
    (List.reverse.aux (Cons x xs) acc) = (List.reverse.aux xs (Cons x acc))

(Pair.fst (Pair fst _)) = fst
(Pair.snd (Pair _ snd)) = snd

// Decides if x is Greater, Lesser, or Equal to y
(Battleship x y) = (BattleshipAux (< x y) (> x y))
    (BattleshipAux 1 _) = Lesser
    (BattleshipAux 0 1) = Greater
    (BattleshipAux 0 0) = Equal

// Decreasing Range:
// Creates a range from n-1 to 0
(DecRange 0) = Nil
(DecRange n) =
    let dec = (- n 1)
    (Cons dec (DecRange dec))


//* "Getters"

// Rank(n: Node<Key>) -> Nat
(Rank (Node rank root children)) = rank
// Root(n: Node<Key>) -> Key
(Root (Node rank root children)) = root
// Children(n: Node<Key>) -> Heap<Key>
(Children (Node rank root children)) = children


//* Heap Functions

// Links together two trees with the same rank
// The tree returned will be the tree with smaller root with:
//   - the other tree as one of its children
//   - its rank increased by 1
// Link(n1: Node, n2: Node) -> Node
(Link n1 n2) = (LinkAux (<= (Root n1) (Root n2)) n1 n2)
    (LinkAux 1 (Node r1 x1 c1) n2) = (Node (+ r1 1) x1 (Cons n2 c1))
    (LinkAux 0 n1 (Node r2 x2 c2)) = (Node (+ r2 1) x2 (Cons n1 c2))

// Inserts a Tree into the heap
// P.S.: Not to be used by itself, you could break the heap structure
// InsertTree(new: Node, pq: Heap) -> Heap
(InsertTree new  Nil)        = (Cons new Nil)
(InsertTree new (Cons x xs)) = (InsertTreeAux (< (Rank new) (Rank x)) new (Cons x xs))
    (InsertTreeAux 1 new  xs        ) = (Cons new xs)
    (InsertTreeAux 0 new (Cons x xs)) = (InsertTree (Link new x) xs)

// Inserts a key into the heap
// It does so by creating a Node with the key and calling InsertTree
// Insert(x: Key, pq: Heap) -> Heap
(Insert x pq) = (InsertTree (Node 0 x Nil) pq)

// Merge together two heaps
// Merge(pq1: Heap, pq2: Heap) -> Heap
(Merge pq Nil) = pq
(Merge Nil pq) = pq
(Merge (Cons x xs) (Cons y ys)) = (MergeAux (Battleship (Rank x) (Rank y)) (Cons x xs) (Cons y ys))
    (MergeAux Lesser  (Cons x xs) (Cons y ys)) = (Cons x (Merge xs (Cons y ys)))
    (MergeAux Greater (Cons x xs) (Cons y ys)) = (Cons y (Merge (Cons x xs) ys))
    (MergeAux Equal   (Cons x xs) (Cons y ys)) = (InsertTree (Link x y) (Merge xs ys))

// Finds the minimal element of the heap
// Returns Maybe.none if the heap is empty
// FindMin(pq: Heap<Key>) -> Maybe<Key>
(FindMin  Nil)         = Maybe.none
(FindMin (Cons t ts))  = (Maybe.some (FindMinAux ts (Root t)))
    (FindMinAux  Nil        n) = n
    (FindMinAux (Cons t ts) n) =
        let min = (Nat.min n (Root t))
        (FindMinAux ts min)

// Removes the minimal element of the heap
// Returns an empty heap if the heap is already empty
// DeleteMin(pq: Heap<Key>) -> Heap<Key>
(DeleteMin Nil) = Nil
(DeleteMin pq)  =
    let get_min = (GetMin pq)
    let removed = (Pair.fst get_min)
    let new_pq  = (Pair.snd get_min)
    (Merge (List.reverse (Children removed)) new_pq)

// Returns a pair of:
//   - the tree with the minimal element;
//   - the input heap without said tree;
// GetMin(pq: Heap<Key>) -> Pair<Node<Key>,Heap<Key>>
(GetMin (Cons x Nil)) = (Pair x Nil)
(GetMin (Cons x xs )) =
    let rec = (GetMin xs)
    (GetMinAux (<= (Root x) (Root (Pair.fst rec))) (Cons x xs) rec)

(GetMinAux 1 (Cons x xs) rec) = (Pair x xs)
(GetMinAux 0 (Cons x xs) rec) = 
    let rec_node = (Pair.fst rec)
    let rec_pq = (Pair.snd rec) 
    (Pair rec_node (Cons x rec_pq))

// Creates a heap using a list of natural numbers
// ListToHeap(xs: List<Key>) -> Heap<Key>
(ListToHeap xs) = (ListToHeapAux xs Nil)
    (ListToHeapAux  Nil        pq) = pq
    (ListToHeapAux (Cons x xs) pq) = (ListToHeapAux xs (Insert x pq))


(Main n) =
    // Some vars
    let heap1 = (ListToHeap [1,2,3,4,5])
    let heap2 = (ListToHeap [6,7,8,9,10,11,12])
    let heap3 = (ListToHeap [0,13,14,15,16,17])
    let heapmaster = (Merge heap3 (Merge heap1 heap2))

    // Testing Constructors
    //heap2
    //heapmaster
    //(FindMin heapmaster)
    //(DeleteMin heapmaster)

    // "Benchmarking"
    // (ListToHeap (DecRange 10))     // 572 RW,      723 Mem Size
    // (ListToHeap (DecRange 100))    // 13844 RW,    15816 Mem Size
    // (ListToHeap (DecRange 1000))   // 230627 RW,   267046 Mem Size
    // (ListToHeap (DecRange 10000))  // 3969306 RW,  4663518 Mem Size
    // (ListToHeap (DecRange 100000)) // 56346413 RW, 66616128 Mem Size
    // Expected complexity for ListToHeap is O(n*log(n)), because it calls Insertion (O(log n)) n times.
    // As such, having the rewrites increase 20x when incresing the input 10x makes sense

    // General use
    (ListToHeap (DecRange n))
